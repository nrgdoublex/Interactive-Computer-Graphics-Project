// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "gui.h"

void MainUI::cb_Resize_i(Fl_Button*, void*) {
  resize();
}
void MainUI::cb_Resize(Fl_Button* o, void* v) {
  ((MainUI*)(o->parent()->user_data()))->cb_Resize_i(o,v);
}

void MainUI::cb_Set_i(Fl_Button*, void*) {
  setbgr();
}
void MainUI::cb_Set(Fl_Button* o, void* v) {
  ((MainUI*)(o->parent()->user_data()))->cb_Set_i(o,v);
}

void MainUI::cb_Set1_i(Fl_Button*, void*) {
  setonept();
}
void MainUI::cb_Set1(Fl_Button* o, void* v) {
  ((MainUI*)(o->parent()->user_data()))->cb_Set1_i(o,v);
}

void MainUI::cb_resetBtn_i(Fl_Button*, void*) {
  reset();
}
void MainUI::cb_resetBtn(Fl_Button* o, void* v) {
  ((MainUI*)(o->parent()->user_data()))->cb_resetBtn_i(o,v);
}

void MainUI::cb_SetRectangle_i(Fl_Button*, void*) {
  setRectangle();
}
void MainUI::cb_SetRectangle(Fl_Button* o, void* v) {
  ((MainUI*)(o->parent()->user_data()))->cb_SetRectangle_i(o,v);
}

void MainUI::cb_setCircle_i(Fl_Button*, void*) {
  drawCircle();
}
void MainUI::cb_setCircle(Fl_Button* o, void* v) {
  ((MainUI*)(o->parent()->user_data()))->cb_setCircle_i(o,v);
}

void MainUI::cb_saveBtn_i(Fl_Button*, void*) {
  saveImage();
}
void MainUI::cb_saveBtn(Fl_Button* o, void* v) {
  ((MainUI*)(o->parent()->user_data()))->cb_saveBtn_i(o,v);
}

void MainUI::cb_readBtn_i(Fl_Button*, void*) {
  readImage();
}
void MainUI::cb_readBtn(Fl_Button* o, void* v) {
  ((MainUI*)(o->parent()->user_data()))->cb_readBtn_i(o,v);
}

void MainUI::cb_animateBtn_i(Fl_Button*, void*) {
  animation();
}
void MainUI::cb_animateBtn(Fl_Button* o, void* v) {
  ((MainUI*)(o->parent()->user_data()))->cb_animateBtn_i(o,v);
}

void MainUI::cb_Draw_i(Fl_Button*, void*) {
  drawTriangle();
}
void MainUI::cb_Draw(Fl_Button* o, void* v) {
  ((MainUI*)(o->parent()->user_data()))->cb_Draw_i(o,v);
}
#include "FrameBufferWrapper.h"

MainUI::MainUI() {
  { uiwindow = new Fl_Double_Window(376, 603, "GUI");
    uiwindow->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(5, 15, 155, 50, "Resize");
      o->selection_color(FL_DARK_RED);
      o->callback((Fl_Callback*)cb_Resize);
    } // Fl_Button* o
    { widthSpinner = new Fl_Spinner(240, 16, 100, 24, "width:");
      widthSpinner->maximum(10000);
    } // Fl_Spinner* widthSpinner
    { heightSpinner = new Fl_Spinner(240, 40, 100, 24, "height:");
      heightSpinner->maximum(10000);
    } // Fl_Spinner* heightSpinner
    { Fl_Button* o = new Fl_Button(5, 135, 155, 25, "Set Background");
      o->callback((Fl_Callback*)cb_Set);
    } // Fl_Button* o
    { redSpinner = new Fl_Spinner(210, 75, 50, 24, "Red:");
      redSpinner->minimum(0);
      redSpinner->maximum(255);
      redSpinner->value(255);
    } // Fl_Spinner* redSpinner
    { greenSpinner = new Fl_Spinner(315, 75, 50, 24, "Green:");
      greenSpinner->minimum(0);
      greenSpinner->maximum(255);
      greenSpinner->value(0);
    } // Fl_Spinner* greenSpinner
    { blueSpinner = new Fl_Spinner(210, 101, 50, 24, "Blue:");
      blueSpinner->minimum(0);
      blueSpinner->maximum(255);
      blueSpinner->value(0);
    } // Fl_Spinner* blueSpinner
    { alphaSpinner = new Fl_Spinner(315, 100, 50, 24, "Alpha:");
      alphaSpinner->minimum(0);
      alphaSpinner->maximum(255);
      alphaSpinner->value(255);
    } // Fl_Spinner* alphaSpinner
    { new Fl_Box(5, 73, 155, 52, "Set Color:");
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(5, 170, 155, 25, "Set One Point:");
      o->callback((Fl_Callback*)cb_Set1);
    } // Fl_Button* o
    { xSpinner = new Fl_Spinner(200, 170, 60, 24, "x:");
      xSpinner->minimum(0);
      xSpinner->maximum(10000);
      xSpinner->value(0);
    } // Fl_Spinner* xSpinner
    { ySpinner = new Fl_Spinner(305, 170, 60, 24, "y:");
      ySpinner->minimum(0);
      ySpinner->maximum(10000);
      ySpinner->value(0);
    } // Fl_Spinner* ySpinner
    { resetBtn = new Fl_Button(200, 135, 165, 25, "Reset");
      resetBtn->callback((Fl_Callback*)cb_resetBtn);
    } // Fl_Button* resetBtn
    { SetRectangle = new Fl_Button(5, 205, 155, 55, "Set Rectangle");
      SetRectangle->callback((Fl_Callback*)cb_SetRectangle);
    } // Fl_Button* SetRectangle
    { x0Spinner = new Fl_Spinner(200, 205, 60, 24, "x0:");
      x0Spinner->minimum(0);
      x0Spinner->maximum(10000);
      x0Spinner->value(0);
    } // Fl_Spinner* x0Spinner
    { y0Spinner = new Fl_Spinner(305, 205, 60, 24, "y0:");
      y0Spinner->minimum(0);
      y0Spinner->maximum(10000);
      y0Spinner->value(0);
    } // Fl_Spinner* y0Spinner
    { x1Spinner = new Fl_Spinner(200, 236, 60, 24, "x1:");
      x1Spinner->minimum(0);
      x1Spinner->maximum(10000);
      x1Spinner->value(0);
    } // Fl_Spinner* x1Spinner
    { y1Spinner = new Fl_Spinner(305, 236, 60, 24, "y1:");
      y1Spinner->minimum(0);
      y1Spinner->maximum(10000);
      y1Spinner->value(0);
    } // Fl_Spinner* y1Spinner
    { setCircle = new Fl_Button(5, 270, 155, 75, "Draw Circle");
      setCircle->callback((Fl_Callback*)cb_setCircle);
    } // Fl_Button* setCircle
    { xcSpinner = new Fl_Spinner(235, 271, 55, 24, "center_x:");
      xcSpinner->minimum(0);
      xcSpinner->maximum(10000);
      xcSpinner->value(0);
    } // Fl_Spinner* xcSpinner
    { ycSpinner = new Fl_Spinner(235, 296, 55, 24, "center_y:");
      ycSpinner->minimum(0);
      ycSpinner->maximum(10000);
      ycSpinner->value(0);
    } // Fl_Spinner* ycSpinner
    { radiusSpinner = new Fl_Spinner(235, 321, 100, 24, "radius:");
      radiusSpinner->type(1);
      radiusSpinner->minimum(0);
      radiusSpinner->maximum(10000);
      radiusSpinner->step(0.1);
    } // Fl_Spinner* radiusSpinner
    { saveBtn = new Fl_Button(5, 430, 155, 35, "Save Image");
      saveBtn->callback((Fl_Callback*)cb_saveBtn);
    } // Fl_Button* saveBtn
    { saveInput = new Fl_File_Input(205, 431, 165, 34, "save:");
    } // Fl_File_Input* saveInput
    { readBtn = new Fl_Button(5, 470, 155, 35, "Read Image");
      readBtn->callback((Fl_Callback*)cb_readBtn);
    } // Fl_Button* readBtn
    { readInput = new Fl_File_Input(205, 471, 165, 34, "read:");
    } // Fl_File_Input* readInput
    { animateBtn = new Fl_Button(5, 510, 155, 45, "Animation");
      animateBtn->callback((Fl_Callback*)cb_animateBtn);
    } // Fl_Button* animateBtn
    { Fl_Button* o = new Fl_Button(5, 350, 155, 75, "Draw Triangle");
      o->callback((Fl_Callback*)cb_Draw);
    } // Fl_Button* o
    { x00Spinner = new Fl_Spinner(200, 351, 60, 24, "x0:");
      x00Spinner->type(1);
      x00Spinner->minimum(-10000);
      x00Spinner->maximum(10000);
      x00Spinner->step(0.1);
      x00Spinner->value(0);
    } // Fl_Spinner* x00Spinner
    { y00Spinner = new Fl_Spinner(305, 351, 60, 24, "y0:");
      y00Spinner->type(1);
      y00Spinner->minimum(-10000);
      y00Spinner->maximum(10000);
      y00Spinner->step(0.1);
      y00Spinner->value(0);
    } // Fl_Spinner* y00Spinner
    { x11Spinner = new Fl_Spinner(200, 376, 60, 24, "x1:");
      x11Spinner->type(1);
      x11Spinner->minimum(-10000);
      x11Spinner->maximum(10000);
      x11Spinner->step(0.1);
      x11Spinner->value(0);
    } // Fl_Spinner* x11Spinner
    { y11Spinner = new Fl_Spinner(305, 375, 60, 24, "y1:");
      y11Spinner->type(1);
      y11Spinner->minimum(-10000);
      y11Spinner->maximum(10000);
      y11Spinner->step(0.1);
      y11Spinner->value(0);
    } // Fl_Spinner* y11Spinner
    { x22Spinner = new Fl_Spinner(200, 401, 60, 24, "x2:");
      x22Spinner->type(1);
      x22Spinner->minimum(-10000);
      x22Spinner->maximum(10000);
      x22Spinner->step(0.1);
      x22Spinner->value(0);
    } // Fl_Spinner* x22Spinner
    { y22Spinner = new Fl_Spinner(305, 400, 60, 24, "y2:");
      y22Spinner->type(1);
      y22Spinner->minimum(-10000);
      y22Spinner->maximum(10000);
      y22Spinner->step(0.1);
      y22Spinner->value(0);
    } // Fl_Spinner* y22Spinner
    uiwindow->end();
  } // Fl_Double_Window* uiwindow
}

int main(int argc, char **argv) {
  wrapper = new FrameBufferWrapper(640,480);
  return Fl::run();
}

void MainUI::show() {
  uiwindow->show();
}

void MainUI::resize() {
  int width = widthSpinner->value();
  int height = heightSpinner->value();
  wrapper->resize(width,height);
}

void MainUI::setbgr() {
  unsigned int red = redSpinner->value();
  unsigned int green = greenSpinner->value();
  unsigned int blue = blueSpinner->value();
  unsigned int alpha = alphaSpinner->value();
  unsigned int color = red + (green << 8) + (blue << 16) + (alpha << 24);
  wrapper->setbgr(color);
}

void MainUI::setonept() {
  unsigned int red = redSpinner->value();
  unsigned int green = greenSpinner->value();
  unsigned int blue = blueSpinner->value();
  unsigned int alpha = alphaSpinner->value();
  unsigned int color = red + (green << 8) + (blue << 16) + (alpha << 24);
  unsigned int x = xSpinner->value();
  unsigned int y = ySpinner->value();
  wrapper->set(x,y,color);
}

void MainUI::reset() {
  wrapper->setbgr(0xFFFFFFFF);
}

void MainUI::setRectangle() {
  unsigned int x0 = x0Spinner->value();
  unsigned int y0 = y0Spinner->value();
  unsigned int x1 = x1Spinner->value();
  unsigned int y1 = y1Spinner->value();
  if (x0 > x1 || y0 > y1)
  	return;
  unsigned int red = redSpinner->value();
  unsigned int green = greenSpinner->value();
  unsigned int blue = blueSpinner->value();
  unsigned int alpha = alphaSpinner->value();
  unsigned int color = red + (green << 8) + (blue << 16) + (alpha << 24);
  wrapper->drawRectangle(x0,y0,x1,y1,color);
}

void MainUI::drawCircle() {
  unsigned int xc = xcSpinner->value();
  unsigned int yc = ycSpinner->value();
  float radius = radiusSpinner->value();
  unsigned int red = redSpinner->value();
  unsigned int green = greenSpinner->value();
  unsigned int blue = blueSpinner->value();
  unsigned int alpha = alphaSpinner->value();
  unsigned int color = red + (green << 8) + (blue << 16) + (alpha << 24);
  wrapper->drawCircle(xc,yc,radius,color);
}

void MainUI::saveImage() {
  const char *filepath = this->saveInput->value();
  if (wrapper->saveImage(filepath) == -1){
  	this->saveInput->value("Invalid Path!");
  }
}

void MainUI::readImage() {
  const char *filepath = this->readInput->value();
  if (wrapper->readImage(filepath) == -1){
  	this->readInput->value("Invalid Path!");
  }
}

void MainUI::animation() {
  unsigned int red = redSpinner->value();
  unsigned int green = greenSpinner->value();
  unsigned int blue = blueSpinner->value();
  unsigned int alpha = alphaSpinner->value();
  unsigned int color = red + (green << 8) + (blue << 16) + (alpha << 24);
  wrapper->animation(color);
}

void MainUI::drawTriangle() {
  int x0 = x00Spinner->value();
  int y0 = y00Spinner->value();
  int x1 = x11Spinner->value();
  int y1 = y11Spinner->value();
  int x2 = x22Spinner->value();
  int y2 = y22Spinner->value();
  unsigned int red = redSpinner->value();
  unsigned int green = greenSpinner->value();
  unsigned int blue = blueSpinner->value();
  unsigned int alpha = alphaSpinner->value();
  unsigned int color = red + (green << 8) + (blue << 16) + (alpha << 24);
  wrapper->drawTriangle(x0,y0,x1,y1,x2,y2,color);
}
